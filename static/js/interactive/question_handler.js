/**
 * „Éï„Ç°„Ç§„É´Âêç: static/js/interactive/question_handler.js
 * ÂΩπÂâ≤: „Ç§„É≥„Çø„É©„ÇØ„ÉÜ„Ç£„ÉñË≥™ÂïèÂá¶ÁêÜ„ÅÆÁµ±ÂêàÂà∂Âæ°
 * ‰æùÂ≠òÈñ¢‰øÇ: 
 *   - window.currentLabels (Â§öË®ÄË™ûÂØæÂøú)
 *   - showToast() (ÈÄöÁü•Ê©üËÉΩ)
 *   - fetch API („Çµ„Éº„Éê„ÉºÈÄö‰ø°)
 * ÂÖ¨Èñã„Ç§„É≥„Çø„Éº„Éï„Çß„Éº„Çπ:
 *   - askInteractiveQuestion(): „É°„Ç§„É≥Ë≥™ÂïèÂá¶ÁêÜ
 *   - setupQuestionInputEvents(): „Ç§„Éô„É≥„ÉàÂàùÊúüÂåñ
 * ÈáçË§áÈñ¢Êï∞ÂØæÂøú: askInteractiveQuestion()„ÅÆË©≥Á¥∞„É≠„Ç∞Áâà„ÇíÊé°Áî®
 * ÊúÄÁµÇÊõ¥Êñ∞: H2-2(B2-3) Stage 1 Phase 1
 * Êà¶Áï•„Ç≥„É≥„ÉÜ„Ç≠„Çπ„Éà: 1000Ë°åÂâäÊ∏õÊà¶Áï• Stage 1 Phase 1
 * ÂìÅË≥™‰øùË®º: Stage 1Âü∫Ê∫ñÔºàÈÄöÂ∏∏ÂÆüË£Ö„ÉªÈ´òÂìÅË≥™Á∂≠ÊåÅÔºâ
 */

// =============================================================================
// üß† „Ç§„É≥„Çø„É©„ÇØ„ÉÜ„Ç£„ÉñQ&AË≥™ÂïèÂá¶ÁêÜ„Ç∑„Çπ„ÉÜ„É† (Ë©≥Á¥∞„É≠„Ç∞Âº∑ÂåñÁâà)
// =============================================================================

/**
 * „Ç§„É≥„Çø„É©„ÇØ„ÉÜ„Ç£„ÉñË≥™Âïè„ÇíÈÄÅ‰ø°„Åô„ÇãÈñ¢Êï∞ÔºàË©≥Á¥∞„É≠„Ç∞Âº∑ÂåñÁâàÔºâ
 * Ë™øÊüª„ÅßÁ¢∫Ë™ç„Åï„Çå„Åü2„Å§„ÅÆÈáçË§áÈñ¢Êï∞„ÅÆ„ÅÜ„Å°„ÄÅ„Çà„ÇäÂÆåÊàêÂ∫¶„ÅÆÈ´ò„ÅÑË©≥Á¥∞„É≠„Ç∞Áâà„ÇíÊé°Áî®
 */
async function askInteractiveQuestion() {
  console.log('üì§ [QUESTION] Function called');
  console.log('üì§ [QUESTION] Timestamp:', new Date().toISOString());
  
  const questionInput = document.getElementById('question-input');
  const questionBtn = document.getElementById('question-btn');
  
  // Âü∫Êú¨Ë¶ÅÁ¥†„ÉÅ„Çß„ÉÉ„ÇØ
  console.log('üì§ [QUESTION] DOM element checks:');
  console.log('  - questionInput found:', !!questionInput);
  console.log('  - questionBtn found:', !!questionBtn);
  
  if (!questionInput || !questionBtn) {
    console.error('‚ùå [QUESTION] Question input or button not found');
    return;
  }

  const question = questionInput.value.trim();
  console.log('üì§ [QUESTION] Question details:');
  console.log('  - Question length:', question.length);
  console.log('  - Question content:', question.substring(0, 100) + (question.length > 100 ? '...' : ''));
  
  if (!question) {
    console.warn('‚ö†Ô∏è [QUESTION] Empty question submitted');
    alert(window.currentLabels.enter_question || 'Please enter a question');
    return;
  }

  if (question.length < 5) {
    console.warn('‚ö†Ô∏è [QUESTION] Question too short:', question.length);
    alert(window.currentLabels.question_min_length || 'Please enter a question with at least 5 characters');
    return;
  }

  // Cookie „Çµ„Ç§„Ç∫‰∫ãÂâç„ÉÅ„Çß„ÉÉ„ÇØ
  const initialCookieSize = document.cookie.length;
  console.log('üç™ [QUESTION] Cookie size before request:', initialCookieSize, 'bytes');
  console.log('üç™ [QUESTION] Cookie content sample:', document.cookie.substring(0, 200) + '...');

  // UI„ÇíÁÑ°ÂäπÂåñ
  questionBtn.disabled = true;
  questionBtn.textContent = window.currentLabels.processing_text || 'Processing...';
  console.log('üîí [QUESTION] UI disabled for processing');
  
  try {
    const csrfToken = document.querySelector('meta[name="csrf-token"]')?.getAttribute('content');
    console.log('üîê [QUESTION] CSRF token found:', !!csrfToken);
    
    const requestData = { question: question };
    const requestBody = JSON.stringify(requestData);
    console.log('üì§ [QUESTION] Request preparation:');
    console.log('  - Request data:', requestData);
    console.log('  - Request body size:', requestBody.length, 'bytes');
    
    console.log('üì§ [QUESTION] Starting fetch request...');
    const response = await fetch('/interactive_question', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRFToken': csrfToken || ''
      },
      body: requestBody
    });

    console.log('üì• [RESPONSE] Response received:');
    console.log('  - Status:', response.status);
    console.log('  - Status text:', response.statusText);
    console.log('  - Headers:', Object.fromEntries(response.headers.entries()));
    
    // Cookie „Çµ„Ç§„Ç∫‰∫ãÂæå„ÉÅ„Çß„ÉÉ„ÇØ
    const finalCookieSize = document.cookie.length;
    console.log('üç™ [RESPONSE] Cookie size after response:', finalCookieSize, 'bytes');
    console.log('üç™ [RESPONSE] Cookie size change:', finalCookieSize - initialCookieSize, 'bytes');
    
    if (response.ok) {
      const data = await response.json();
      console.log('üì• [RESPONSE] Data received successfully:');
      console.log('  - Data structure keys:', Object.keys(data));
      console.log('  - Data.success:', data.success);
      console.log('  - Data.result exists:', !!data.result);
      console.log('  - Data.chat_history exists:', !!data.chat_history);
      
      if (data.chat_history) {
        console.log('üì• [RESPONSE] Chat history details:');
        console.log('  - Chat history length:', data.chat_history.length);
        console.log('  - First item sample:', data.chat_history[0] ? {
          question: data.chat_history[0].question?.substring(0, 50) + '...',
          answer: data.chat_history[0].answer?.substring(0, 50) + '...',
          type: data.chat_history[0].type,
          timestamp: data.chat_history[0].timestamp
        } : 'No items');
      }
      
      if (data.success) {
        console.log('üîÑ [PROCESSING] Starting successful response processing...');
        
        // ÂÖ•Âäõ„Çí„ÇØ„É™„Ç¢
        questionInput.value = '';
        console.log('üßπ [PROCESSING] Input field cleared');
        
        // üÜï Á¢∫ÂÆü„Å™Ë°®Á§∫Âá¶ÁêÜÔºöDOMÊõ¥Êñ∞„ÇíÂæÖ„Å£„Å¶„Åã„ÇâË°®Á§∫
        console.log('üñ•Ô∏è [DISPLAY] Starting display process with 50ms delay...');
        setTimeout(() => {
          console.log('üñ•Ô∏è [DISPLAY] Calling updateChatHistory...');
          updateChatHistory(data.chat_history);
          
          // üÜï Ë°®Á§∫Áä∂ÊÖã„ÅÆÂº∑Âà∂Á¢∫Ë™ç
          const chatHistorySection = document.getElementById('chat-history');
          console.log('üñ•Ô∏è [DISPLAY] Post-display checks:');
          console.log('  - Chat history section found:', !!chatHistorySection);
          
          if (chatHistorySection && data.chat_history && data.chat_history.length > 0) {
            chatHistorySection.style.display = 'block';
            console.log('‚úÖ [DISPLAY] Chat history section shown');
            console.log('üñ•Ô∏è [DISPLAY] Section visibility:', getComputedStyle(chatHistorySection).display);
          }
        }, 50);
        
        // ÊàêÂäü„É°„ÉÉ„Çª„Éº„Ç∏
        showToast(window.currentLabels.question_generated || 'Response generated successfully', 'success');
        console.log('‚úÖ [QUESTION] Question processed successfully');
        
      } else {
        console.error('‚ùå [RESPONSE] Server returned success: false');
        console.error('‚ùå [RESPONSE] Error details:', data.error);
        showToast(data.error || window.currentLabels.error_occurred || 'An error occurred during question processing', 'error');
      }
    } else {
      console.error('‚ùå [RESPONSE] HTTP request failed:');
      console.error('  - Status:', response.status);
      console.error('  - Status text:', response.statusText);
      showToast(window.currentLabels.api_error_general || 'Server error occurred', 'error');
    }
  } catch (error) {
    console.error('‚ùå [QUESTION] Fetch error occurred:');
    console.error('  - Error message:', error.message);
    console.error('  - Error stack:', error.stack);
    showToast(window.currentLabels.api_error_network || 'Error occurred while sending question', 'error');
  } finally {
    // UI„ÇíÂæ©ÂÖÉ
    questionBtn.disabled = false;
    questionBtn.textContent = window.currentLabels.interactive_button || 'Ask Question';
    console.log('üîì [QUESTION] UI restored to normal state');
  }
}